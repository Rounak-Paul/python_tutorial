# dictionaries in python

my_dict = {
    'product' : 'face_mask',
    'brand' : 'elon_musk',
    'qty' : 1969 
}

print(f'{my_dict} \nis of type {type(my_dict)}')

# access dictionary items
product = my_dict['product']
print(product)

# 'product' is called key and the corresponding entry 'face_mask' is called value
# dict in python is a key, value pair data type
# for lists, the key like feature of the elements were the indices 
# which were generated by default
# in dict we have to give the keys and vlaues in pair

# keys can not be duplicate
my_dict = {
    'product' : 'face_mask',
    'brand' : 'elon_musk',
    'qty' : 1969, 
    'qty' : 2024 
}
print(my_dict)

# creating dict with dict() Constructor
my_dict = dict(name = 'python', kind = 'snake', used_as = 'language', leg_count = 0)
print(my_dict)

new_dict = {
    'name' : 'apple',
    'count' : 32,
    'colors' : ['red', 'green'],
    'import_info' : {
        'from' : 'kolkata',
        'country' : 'India',
        'date' : (11, 1, 2024)
    }
}

print(type(new_dict))
print(type(new_dict['count']))
print(type(new_dict['colors']))
print(type(new_dict['import_info']))

# access value in a nested dict
date_of_import = new_dict['import_info']['date']
print(f'{date_of_import} is of type {type(date_of_import)}')

# keys
dict_keys = new_dict.keys()

# values
dict_values = new_dict.values()

print(type(dict_keys))
print(type(dict_values))

# change item
print(new_dict)
new_dict['count'] = 400
print(new_dict)

# change item with update
new_dict.update({'count' : 999})
print(new_dict)

# remove item
item = new_dict.popitem() # removes last item
print(item)
print(new_dict)

item = new_dict.pop('count')
print(item)
print(new_dict)

# copy
copy_of_new_dict = new_dict
print(id(copy_of_new_dict) == id(new_dict))
# same as lists, to copy a dict, two methods are available
copy_of_new_dict = new_dict.copy()
print(id(copy_of_new_dict) == id(new_dict))

copy_of_new_dict = dict(new_dict)
print(id(copy_of_new_dict) == id(new_dict))

# clear
new_dict.clear()
print(new_dict)





